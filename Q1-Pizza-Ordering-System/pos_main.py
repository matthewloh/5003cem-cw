""" 
Question 1: Pizza Ordering System
Design and develop a Pizza Ordering System based on the following requirements:
• The program should be menu driven, giving the user various choices of operation that allows the
user to:
o place an order for the pizza(s).
o View their order details.
o Modify or delete a particular order if necessary.
• For every order, the following information will be stored:
o OrderID (this should be autogenerated), Pizza Code, toppings, size, unit price, quantity
and customer information.
o The customer information should consists of customerID, name, address and contact
number.
o The system shall display additional information such as amount (unit price * quantity)
when viewing the order details.
• The program must use BST data structure to facilitate each operation.
• The system shall demonstrate a good OOP design, data validation and error handling.
"""
from dataclasses import dataclass, field
import time
from typing import List
import datetime as dt
from pos_constants import TIMEFMT, DATEFMT, DATE_WITH_TIMEFMT
from pos_entities import Customer, Pizza, Order
from pos_BST import BinarySearchTree, Node


@dataclass
class PizzaOrderingSystemCLI:
    BST: BinarySearchTree = field(default_factory=BinarySearchTree)
    order_id: int = 0

    def init_current_node(self) -> None:
        currentTime = time.time()
        strTime = dt.datetime.fromtimestamp(currentTime).strftime(TIMEFMT)
        strDate = dt.datetime.fromtimestamp(currentTime).strftime(DATEFMT)
        print(strTime, strDate)
        item = Order(unixTimestamp=int(currentTime),
                     order_id=0, pizzas=[], customer=None)
        current_node = Node(unixTimestamp=int(currentTime), item=item)
        print(current_node)

    def display_welcome_art(self) -> None:
        msg = f"""
._________________________________________________________________________.
|  ____ _________ ____ ____ ____ ____ ____ _________ ____ ____ ____ ____  |
| || A |||       |||P |||i |||z |||z |||a |||       |||C |||a |||k |||e | |
| ||___|||_______|||__|||__|||__|||__|||__|||_______|||__|||__|||__|||__| |
| |/___\|/_______\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|/__\|/__\|/__\ | 
._________________________________________________________________________.
"""
        print("=" * 75, end="")
        print(msg, end="")
        print("=" * 75)

    def display_options(self) -> None:
        self.display_welcome_art()
        self.init_current_node()
        print("Pizza Ordering System")
        print("1. Place an order")
        print("2. View order details")
        print("3. Modify or delete an order")
        print("4. Exit")

    def place_order(self) -> None:
        print("Place an order")
        pizza_code = input("Enter pizza code: ")
        toppings = input("Enter toppings: ")
        size = input("Enter size: ")
        unit_price = float(input("Enter unit price: "))
        quantity = int(input("Enter quantity: "))
        customer_id = int(input("Enter customer id: "))
        name = input("Enter name: ")
        address = input("Enter address: ")
        contact_number = input("Enter contact number: ")
        customer = Customer(customer_id, name, address, contact_number)
        pizza = Pizza(pizza_code, toppings, size, unit_price, quantity)
        order = Order(self.order_id, pizza, customer)
        self.BST.insert(Node(order))
        self.order_id += 1

    def view_order_details(self) -> None:
        print("View order details")
        order_id = int(input("Enter order id: "))
        node = self.BST.search_by_order_id(order_id)
        if node:
            order = node.item
            pizzas = order.pizzas
            print(f"Order ID: {order.order_id}")
            print(f"Pizza Code: {order.pizza.pizza_code}")
            print(f"Toppings: {order.pizza.toppings}")
            print(f"Size: {order.pizza.size}")
            print(f"Unit Price: {order.pizza.unit_price}")
            print(f"Quantity: {order.pizza.quantity}")
            print(f"Customer ID: {order.customer.id}")
            print(f"Name: {order.customer.name}")
            print(f"Address: {order.customer.address}")
            print(f"Contact Number: {order.customer.contact_number}")
            print(f"Amount: {order.display_order_amount()}")
        else:
            print("Order not found")


if __name__ == "__main__":
    cli = PizzaOrderingSystemCLI()
    while True:
        cli.display_options()
        choice = int(input("Enter your choice: "))
        if choice == 1:
            cli.place_order()
        elif choice == 2:
            cli.view_order_details()
        elif choice == 3:
            print("Modify or delete an order")
            order_id = int(input("Enter order id: "))
            node = cli.BST.search_by_order_id(order_id)
            if node:
                order = node.item
                print(f"Order ID: {order.order_id}")
                print(f"Pizza Code: {order.pizza.pizza_code}")
                print(f"Toppings: {order.pizza.toppings}")
                print(f"Size: {order.pizza.size}")
                print(f"Unit Price: {order.pizza.unit_price}")
                print(f"Quantity: {order.pizza.quantity}")
                print(f"Customer ID: {order.customer.id}")
                print(f"Name: {order.customer.name}")

                print(f"Address: {order.customer.address}")
                print(f"Contact Number: {order.customer.contact_number}")
                print(f"Amount: {order.display_order_amount()}")
                print("1. Modify order")
                print("2. Delete order")
                choice = int(input("Enter your choice: "))
                if choice == 1:
                    print("Modify order")
                    pizza_code = input("Enter pizza code: ")
                    toppings = input("Enter toppings: ")
                    size = input("Enter size: ")
                    unit_price = float(input("Enter unit price: "))
                    quantity = int(input("Enter quantity: "))
                    customer_id = int(input("Enter customer id: "))
                    name = input("Enter name: ")
                    address = input("Enter address: ")
                    contact_number = input("Enter contact number: ")
                    customer = Customer(customer_id, name,
                                        address, contact_number)
                    pizza = Pizza(pizza_code, toppings,
                                  size, unit_price, quantity)
                    order = Order(cli.order_id, pizza, customer)
                    cli.BST.insert(Node(order))
                    cli.order_id += 1
                elif choice == 2:
                    print("Delete order")
                    cli.BST.delete(order_id)
            else:
                print("Order not found")

        elif choice == 4:
            print("Exit")
            break

        else:
            print("Invalid choice")

        print()
        print()
        print()
        print()
